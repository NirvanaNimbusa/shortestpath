% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FloydWarshall.R
\name{floydWarshall}
\alias{floydWarshall}
\title{Floyd-Warshall Algorithm}
\usage{
floydWarshall(graph, weight.attr = "weight")
}
\arguments{
\item{graph}{The \code{igraph} object.}

\item{weight.attr}{Either \code{NULL} or a character string giving an edge
attribute name for the edge cost.}
}
\value{
A list of \code{spgraph} objects. Each \code{spgraph} object contains
  information about a certain step in the optimization process representing
  by its attributes
}
\description{
Use the Floyd-Warshall algorithm to calculate the shortest path between
all pairs of vertices in a directed, weighted graph
}
\details{
The Floyd-Warshall algorithm is a multi-source algorithm which can in
contrast to the Dijkstra's and A*-Search algorithms deal with negative edge
weights. (Note in order to find the right shortest path it is required that
no negative-weight cycle exist in the graph) The algorithm automatically
detects negative-weight cycles and shows a corresponding error message.

The algorithm consist of a single looping structure containing of tree nested
loops and occurs in V(number of vertices in the graph) passes. Thus, the
running time of the algorithm is V^3 (In contrast Dijkstra and Bellman-Ford
has a running time of V^2 and V*E(number of edges of a graph) )

Important: The computation of the distances is based on an adjacency matrix.
Thus, an edge weight of zero indicates that there exist no edge between
the two vertices.
}
\examples{
  g <- randomGraph(6,euclidean=FALSE)

  fw <- floydWarshall(g)

  plot(fw)

  for(step in fw){
  print(step$min_dists)
  }

}

