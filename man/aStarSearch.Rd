% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aStarSearch.R
\name{aStarSearch}
\alias{aStarSearch}
\title{A*-Search Algorithm}
\usage{
aStarSearch(graph, from, to, distance.heuristic = euclidean.vertex.distance)
}
\arguments{
\item{graph}{The graph object.}

\item{from}{The source vertex}

\item{to}{The target vertex}

\item{distance.heuristic}{The A* distance heuristic.}
}
\value{
An \code{\link{spresults}} object.
}
\description{
Use the A*-Search algorithm to solve a shortest path problem.
}
\details{
A*-Search is a single-source algorithm which cannot deal with negative edge weights.
Compared to Dijkstra's algorithm, it uses an euclidean distance heuristic to estimate
the minimum distance to the target vertex and thereby rule out solutions.
Thus, it is usually vastly faster than Dijkstra, but requires an euclidean problem instance.
}
\examples{
g <- randomGraph(6, euclidean=TRUE)
d <- aStarSearch(g, "A", "F")

plot(d)

for(step in d){
  print(step$min_dists)
}

}
\seealso{
\code{\link{setRandomVertexCoordinates}} and \code{\link{setVertexCoordinatesFromLayout}}
to set vertex coordinates for a graph object.
\code{\link{euclidean.vertex.distance}} for the default distance heuristic.
}

